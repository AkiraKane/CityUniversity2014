function Running()
    % Import Data
    X = [1 0;0 1;1 1;0 0];
    Y=X;
    
    X_target = [1 1 0 0]';
    Y_target = X_target;
    
    
    % Get characteristics
    N_inputs = size(X, 2);
    N_outputs = size(X_target, 2);
    
    % Define the Number of Hidden Neurons
    N_Layers_N_Neurons = [2]; % Can be a row Vector
    
    % Create the Neural Network
    net = create_neural_network(N_inputs, N_outputs, N_Layers_N_Neurons);
    
    % Show Config
    show_setup(net)
    
    % Neural Network Parameters
    Reg     = 1e-5; % Regularisation Value
    epochs  = 3000;  % Number of Epochs to Train Network with
    LR      = 0.5;  % Learning Rate value
    Mo      = 0.1;  % Momentum
    % Define Stopping Criteria.....
        
    % Train Neural Network
    net = train_nn(net, X, Y, Reg, epochs, LR, Mo, X_target, Y_target);
    
    % Final Evaluation
    [net, Y_Prediction_t] = forward_propagate(X, net);
    
    %tabulate(X_target)
    
    [c,cm,ind,per] = confusion(X_target',round(Y_Prediction_t)')
    
    % Calculating Results
    N = sum(sum(cm));
    
    Accuracy    = (cm(1,1) + cm(2,2)) / N;
    Sensitivity = cm(1,1) / (cm(1,1) + cm(2,1));
    Specificity = cm(2,2) / (cm(2,2) + cm(1,2));
    Precision   = cm(1,1) / ();
    
    plotconfusion(X_target',round(Y_Prediction_t)')
    
    per(i,1) false negative rate
          = (false negatives)/(all output negatives)
    per(i,2) false positive rate
          = (false positives)/(all output positives)
    per(i,3) true positive rate
          = (true positives)/(all output positives)
    per(i,4) true negative rate
          = (true negatives)/(all output negatives)
    
    
    
    